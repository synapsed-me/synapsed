warning: field `sequencer` is never read
   --> core/synapsed-substrates/src/circuit.rs:789:5
    |
787 | struct SequencedPipe<E> {
    |        ------------- field in this struct
788 |     channel: Subject,
789 |     sequencer: Arc<dyn Sequencer<dyn Path<E>>>,
    |     ^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `synapsed-substrates` (lib) generated 1 warning
    Checking synapsed-net v0.1.0 (/workspaces/playground/synapsed/core/synapsed-net)
warning: unused imports: `PQSignature`, `SessionState`, and `derive_session_keys`
 --> core/synapsed-net/src/security.rs:5:22
  |
5 |     key_derivation::{derive_session_keys, KeyDerivationFunction},
  |                      ^^^^^^^^^^^^^^^^^^^
6 |     post_quantum::{HybridKeyExchange, PQCipherSuite, PQSignature, PQSignatureAlgorithm},
  |                                                      ^^^^^^^^^^^
7 |     session::{SessionManager, SessionState},
  |                               ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Aes256Gcm`
  --> core/synapsed-net/src/security.rs:12:15
   |
12 | use aes_gcm::{Aes256Gcm, KeyInit as AesKeyInit};
   |               ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> core/synapsed-net/src/security.rs:14:5
   |
14 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> core/synapsed-net/src/transport/libp2p_simple.rs:10:5
   |
10 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused imports: `NetworkAddress` and `PeerMetadata`
 --> core/synapsed-net/src/transport/memory.rs:6:94
  |
6 | use crate::types::{ConnectionId, ConnectionInfo, ConnectionMetrics, PeerInfo, TransportType, NetworkAddress, PeerMetadata};
  |                                                                                              ^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `error`
  --> core/synapsed-net/src/transport/quic.rs:17:22
   |
17 | use tracing::{debug, error, info};
   |                      ^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> core/synapsed-net/src/transport/signaling.rs:6:13
  |
6 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `WebSocketStream`
  --> core/synapsed-net/src/transport/signaling.rs:13:76
   |
13 | use tokio_tungstenite::{accept_async, connect_async, tungstenite::Message, WebSocketStream};
   |                                                                            ^^^^^^^^^^^^^^^

warning: unused import: `debug`
  --> core/synapsed-net/src/transport/tcp.rs:15:15
   |
15 | use tracing::{debug, error, info};
   |               ^^^^^

warning: unused import: `std::pin::Pin`
 --> core/synapsed-net/src/transport/traits.rs:7:5
  |
7 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
 --> core/synapsed-net/src/transport/traits.rs:8:17
  |
8 | use std::task::{Context, Poll};
  |                 ^^^^^^^  ^^^^

warning: unused doc comment
   --> core/synapsed-net/src/transport/websocket.rs:191:1
    |
191 | /// WebSocket stream wrapper that can handle both TLS and non-TLS streams.
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations
    |
    = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion
    = note: `#[warn(unused_doc_comments)]` on by default

warning: unused import: `ready`
 --> core/synapsed-net/src/transport/websocket.rs:8:79
  |
8 | use futures_util::{Sink, SinkExt, StreamExt, stream::Stream as FuturesStream, ready};
  |                                                                               ^^^^^

warning: unused variable: `secret_key`
   --> core/synapsed-net/src/crypto/enhanced_security.rs:491:26
    |
491 |         let (public_key, secret_key) = kex.generate_keypair()?;
    |                          ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_secret_key`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ciphertext`
   --> core/synapsed-net/src/crypto/enhanced_security.rs:495:14
    |
495 |         let (ciphertext, shared_secret) = kex.encapsulate(&public_key)?;
    |              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ciphertext`

warning: unused variable: `public`
   --> core/synapsed-net/src/crypto/enhanced_security.rs:518:13
    |
518 |         let public = x25519_dalek::PublicKey::from(&secret);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_public`

warning: unused variable: `buffer`
   --> core/synapsed-net/src/privacy/tor.rs:328:37
    |
328 |     pub async fn receive(&mut self, buffer: &mut [u8]) -> Result<usize> {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_buffer`

warning: unused variable: `pq_state`
   --> core/synapsed-net/src/security.rs:271:41
    |
271 |         let master_secret = if let Some(pq_state) = &state.pq_key_exchange {
    |                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pq_state`

warning: unused variable: `local_peer_id`
  --> core/synapsed-net/src/transport/signaling.rs:83:13
   |
83 |         let local_peer_id = self.local_peer_id.clone();
   |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_local_peer_id`

warning: variable does not need to be mutable
  --> core/synapsed-net/src/transport/signaling.rs:88:17
   |
88 |             let mut send_task = tokio::spawn(async move {
   |                 ----^^^^^^^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> core/synapsed-net/src/transport/signaling.rs:232:21
    |
232 |         if let Some(mut conn) = self.connection.lock().await.take() {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

error[E0277]: the trait bound `DefaultRng: RngCore` is not satisfied
   --> core/synapsed-net/src/crypto/post_quantum.rs:116:75
    |
116 |             let secret = x25519_dalek::StaticSecret::random_from_rng(&mut self.rng);
    |                          -------------------------------------------      ^^^^^^^^ the trait `RngCore` is not implemented for `DefaultRng`
    |                          |
    |                          required by a bound introduced by this call
    |
note: there are multiple different versions of crate `rand_core` in the dependency graph
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:142:1
    |
142 | pub trait RngCore {
    | ^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: core/synapsed-net/src/crypto/enhanced_security.rs:12:5
    |
12  | use chacha20poly1305::{aead::Aead, ChaCha20Poly1305, KeyInit};
    |     ---------------- one version of crate `rand_core` used here, as a dependency of crate `crypto_common`
    |
   ::: core/synapsed-net/src/crypto/certificates.rs:5:5
    |
5   | use quinn::rustls::client::danger::{HandshakeSignatureValid, ServerCertVerified, ServerCertVerifier};
    |     ----- one version of crate `rand_core` used here, as a dependency of crate `rand`
    |
   ::: /workspaces/playground/synapsed/core/synapsed-crypto/src/random.rs:12:1
    |
12  | pub struct DefaultRng {
    | --------------------- this type doesn't implement the required trait
    |
   ::: /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/block.rs:67:1
    |
67  | pub trait BlockRngCore {
    | ---------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
    = note: required for `&mut DefaultRng` to implement `RngCore`
note: required by a bound in `StaticSecret::random_from_rng`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x25519-dalek-2.0.1/src/x25519.rs:218:31
    |
218 |     pub fn random_from_rng<T: RngCore + CryptoRng>(mut csprng: T) -> Self {
    |                               ^^^^^^^ required by this bound in `StaticSecret::random_from_rng`

error[E0277]: the trait bound `DefaultRng: CryptoRng` is not satisfied
   --> core/synapsed-net/src/crypto/post_quantum.rs:116:75
    |
116 |             let secret = x25519_dalek::StaticSecret::random_from_rng(&mut self.rng);
    |                          -------------------------------------------      ^^^^^^^^ the trait `CryptoRng` is not implemented for `DefaultRng`
    |                          |
    |                          required by a bound introduced by this call
    |
note: there are multiple different versions of crate `rand_core` in the dependency graph
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:209:1
    |
209 | pub trait CryptoRng {}
    | ^^^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: core/synapsed-net/src/crypto/enhanced_security.rs:12:5
    |
12  | use chacha20poly1305::{aead::Aead, ChaCha20Poly1305, KeyInit};
    |     ---------------- one version of crate `rand_core` used here, as a dependency of crate `crypto_common`
    |
   ::: core/synapsed-net/src/crypto/certificates.rs:5:5
    |
5   | use quinn::rustls::client::danger::{HandshakeSignatureValid, ServerCertVerified, ServerCertVerifier};
    |     ----- one version of crate `rand_core` used here, as a dependency of crate `rand`
    |
   ::: /workspaces/playground/synapsed/core/synapsed-crypto/src/random.rs:12:1
    |
12  | pub struct DefaultRng {
    | --------------------- this type doesn't implement the required trait
    |
   ::: /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/block.rs:67:1
    |
67  | pub trait BlockRngCore {
    | ---------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
    = note: required for `&mut DefaultRng` to implement `CryptoRng`
note: required by a bound in `StaticSecret::random_from_rng`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x25519-dalek-2.0.1/src/x25519.rs:218:41
    |
218 |     pub fn random_from_rng<T: RngCore + CryptoRng>(mut csprng: T) -> Self {
    |                                         ^^^^^^^^^ required by this bound in `StaticSecret::random_from_rng`

error[E0277]: the trait bound `DefaultRng: RngCore` is not satisfied
   --> core/synapsed-net/src/crypto/post_quantum.rs:155:85
    |
155 |             let ephemeral_secret = x25519_dalek::StaticSecret::random_from_rng(&mut self.rng);
    |                                    -------------------------------------------      ^^^^^^^^ the trait `RngCore` is not implemented for `DefaultRng`
    |                                    |
    |                                    required by a bound introduced by this call
    |
note: there are multiple different versions of crate `rand_core` in the dependency graph
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:142:1
    |
142 | pub trait RngCore {
    | ^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: core/synapsed-net/src/crypto/enhanced_security.rs:12:5
    |
12  | use chacha20poly1305::{aead::Aead, ChaCha20Poly1305, KeyInit};
    |     ---------------- one version of crate `rand_core` used here, as a dependency of crate `crypto_common`
    |
   ::: core/synapsed-net/src/crypto/certificates.rs:5:5
    |
5   | use quinn::rustls::client::danger::{HandshakeSignatureValid, ServerCertVerified, ServerCertVerifier};
    |     ----- one version of crate `rand_core` used here, as a dependency of crate `rand`
    |
   ::: /workspaces/playground/synapsed/core/synapsed-crypto/src/random.rs:12:1
    |
12  | pub struct DefaultRng {
    | --------------------- this type doesn't implement the required trait
    |
   ::: /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/block.rs:67:1
    |
67  | pub trait BlockRngCore {
    | ---------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
    = note: required for `&mut DefaultRng` to implement `RngCore`
note: required by a bound in `StaticSecret::random_from_rng`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x25519-dalek-2.0.1/src/x25519.rs:218:31
    |
218 |     pub fn random_from_rng<T: RngCore + CryptoRng>(mut csprng: T) -> Self {
    |                               ^^^^^^^ required by this bound in `StaticSecret::random_from_rng`

error[E0277]: the trait bound `DefaultRng: CryptoRng` is not satisfied
   --> core/synapsed-net/src/crypto/post_quantum.rs:155:85
    |
155 |             let ephemeral_secret = x25519_dalek::StaticSecret::random_from_rng(&mut self.rng);
    |                                    -------------------------------------------      ^^^^^^^^ the trait `CryptoRng` is not implemented for `DefaultRng`
    |                                    |
    |                                    required by a bound introduced by this call
    |
note: there are multiple different versions of crate `rand_core` in the dependency graph
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:209:1
    |
209 | pub trait CryptoRng {}
    | ^^^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: core/synapsed-net/src/crypto/enhanced_security.rs:12:5
    |
12  | use chacha20poly1305::{aead::Aead, ChaCha20Poly1305, KeyInit};
    |     ---------------- one version of crate `rand_core` used here, as a dependency of crate `crypto_common`
    |
   ::: core/synapsed-net/src/crypto/certificates.rs:5:5
    |
5   | use quinn::rustls::client::danger::{HandshakeSignatureValid, ServerCertVerified, ServerCertVerifier};
    |     ----- one version of crate `rand_core` used here, as a dependency of crate `rand`
    |
   ::: /workspaces/playground/synapsed/core/synapsed-crypto/src/random.rs:12:1
    |
12  | pub struct DefaultRng {
    | --------------------- this type doesn't implement the required trait
    |
   ::: /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/block.rs:67:1
    |
67  | pub trait BlockRngCore {
    | ---------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
    = note: required for `&mut DefaultRng` to implement `CryptoRng`
note: required by a bound in `StaticSecret::random_from_rng`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x25519-dalek-2.0.1/src/x25519.rs:218:41
    |
218 |     pub fn random_from_rng<T: RngCore + CryptoRng>(mut csprng: T) -> Self {
    |                                         ^^^^^^^^^ required by this bound in `StaticSecret::random_from_rng`

error[E0308]: mismatched types
   --> core/synapsed-net/src/crypto/post_quantum.rs:275:30
    |
275 |         Ok(Self { algorithm, rng })
    |                              ^^^ expected `DefaultRng`, found `ThreadRng`

error[E0277]: the trait bound `PQKeyExchangeState: Clone` is not satisfied
   --> core/synapsed-net/src/security.rs:147:5
    |
126 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
147 |     pq_key_exchange: Option<Box<PQKeyExchangeState>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `PQKeyExchangeState`
    |
    = note: required for `Box<PQKeyExchangeState>` to implement `Clone`
    = note: 1 redundant requirement hidden
    = note: required for `std::option::Option<Box<PQKeyExchangeState>>` to implement `Clone`

error[E0560]: struct `SessionState` has no field named `key`
   --> core/synapsed-net/src/security.rs:409:13
    |
409 |             key,
    |             ^^^ `SessionState` does not have this field
    |
    = note: available fields are: `id`, `last_activity`, `rotation_count`, `authenticated`

error[E0560]: struct `SessionState` has no field named `kdf`
   --> core/synapsed-net/src/security.rs:410:13
    |
410 |             kdf: "blake3".to_string(),
    |             ^^^ `SessionState` does not have this field
    |
    = note: available fields are: `id`, `last_activity`, `rotation_count`, `authenticated`

error[E0277]: `dyn Fn(&TransportRequirements, &...) -> ... + Send + Sync` doesn't implement `std::fmt::Debug`
   --> core/synapsed-net/src/transport/manager.rs:101:12
    |
86  | #[derive(Debug, Clone, PartialEq)]
    |          ----- in this derive macro expansion
...
101 |     Custom(Arc<dyn Fn(&TransportRequirements, &HashMap<TransportType, TransportScore>) -> Option<TransportType> + Send + Sync>),
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Fn(&TransportRequirements, &...) -> ... + Send + Sync` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
    = help: the trait `std::fmt::Debug` is not implemented for `dyn Fn(&TransportRequirements, &...) -> ... + Send + Sync`
    = note: the full name for the type has been written to '/workspaces/playground/synapsed/target/debug/deps/synapsed_net-946e2895dfb97795.long-type-2972749931495855639.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0369]: binary operation `==` cannot be applied to type `&Arc<dyn Fn(&TransportRequirements, &...) -> ... + Send + Sync>`
   --> core/synapsed-net/src/transport/manager.rs:101:12
    |
86  | #[derive(Debug, Clone, PartialEq)]
    |                        --------- in this derive macro expansion
...
101 |     Custom(Arc<dyn Fn(&TransportRequirements, &HashMap<TransportType, TransportScore>) -> Option<TransportType> + Send + Sync>),
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: the full name for the type has been written to '/workspaces/playground/synapsed/target/debug/deps/synapsed_net-946e2895dfb97795.long-type-17176380710324083512.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `rustls::ClientConfig: quinn::crypto::ClientConfig` is not satisfied
  --> core/synapsed-net/src/transport/quic.rs:64:51
   |
64 |         let mut client_config = ClientConfig::new(Arc::new(client_crypto));
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `quinn::crypto::ClientConfig` is not implemented for `rustls::ClientConfig`
   |
   = help: the trait `quinn::crypto::ClientConfig` is implemented for `QuicClientConfig`
   = note: required for the cast from `Arc<rustls::ClientConfig>` to `Arc<(dyn quinn::crypto::ClientConfig + 'static)>`

error[E0599]: no variant or associated item named `Configuration` found for enum `error::TransportError` in the current scope
  --> core/synapsed-net/src/transport/quic.rs:73:37
   |
73 |                     TransportError::Configuration("Invalid idle timeout duration".to_string())
   |                                     ^^^^^^^^^^^^^ variant or associated item not found in `TransportError`
   |
  ::: core/synapsed-net/src/error.rs:55:1
   |
55 | pub enum TransportError {
   | ----------------------- variant or associated item `Configuration` not found for this enum

error[E0277]: the trait bound `rustls::ServerConfig: quinn::crypto::ServerConfig` is not satisfied
  --> core/synapsed-net/src/transport/quic.rs:90:59
   |
90 |         let mut server_config = ServerConfig::with_crypto(Arc::new(server_crypto));
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^ the trait `quinn::crypto::ServerConfig` is not implemented for `rustls::ServerConfig`
   |
   = help: the trait `quinn::crypto::ServerConfig` is implemented for `QuicServerConfig`
   = note: required for the cast from `Arc<rustls::ServerConfig>` to `Arc<(dyn quinn::crypto::ServerConfig + 'static)>`

error[E0599]: no method named `clone` found for struct `quinn::TransportConfig` in the current scope
  --> core/synapsed-net/src/transport/quic.rs:91:66
   |
91 |         server_config.transport_config(Arc::new(transport_config.clone()));
   |                                                                  ^^^^^ method not found in `TransportConfig`

error[E0277]: the trait bound `rustls::ClientConfig: quinn::crypto::ClientConfig` is not satisfied
   --> core/synapsed-net/src/transport/quic.rs:125:51
    |
125 |         let mut client_config = ClientConfig::new(Arc::new(client_crypto));
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `quinn::crypto::ClientConfig` is not implemented for `rustls::ClientConfig`
    |
    = help: the trait `quinn::crypto::ClientConfig` is implemented for `QuicClientConfig`
    = note: required for the cast from `Arc<rustls::ClientConfig>` to `Arc<(dyn quinn::crypto::ClientConfig + 'static)>`

error[E0599]: no variant or associated item named `Configuration` found for enum `error::TransportError` in the current scope
   --> core/synapsed-net/src/transport/quic.rs:134:37
    |
134 |                     TransportError::Configuration("Invalid idle timeout duration".to_string())
    |                                     ^^^^^^^^^^^^^ variant or associated item not found in `TransportError`
    |
   ::: core/synapsed-net/src/error.rs:55:1
    |
55  | pub enum TransportError {
    | ----------------------- variant or associated item `Configuration` not found for this enum

error[E0277]: the trait bound `rustls::ServerConfig: quinn::crypto::ServerConfig` is not satisfied
   --> core/synapsed-net/src/transport/quic.rs:151:59
    |
151 |         let mut server_config = ServerConfig::with_crypto(Arc::new(server_crypto));
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^ the trait `quinn::crypto::ServerConfig` is not implemented for `rustls::ServerConfig`
    |
    = help: the trait `quinn::crypto::ServerConfig` is implemented for `QuicServerConfig`
    = note: required for the cast from `Arc<rustls::ServerConfig>` to `Arc<(dyn quinn::crypto::ServerConfig + 'static)>`

error[E0599]: no method named `clone` found for struct `quinn::TransportConfig` in the current scope
   --> core/synapsed-net/src/transport/quic.rs:152:66
    |
152 |         server_config.transport_config(Arc::new(transport_config.clone()));
    |                                                                  ^^^^^ method not found in `TransportConfig`

error[E0599]: no method named `enable_0rtt` found for struct `quinn::ClientConfig` in the current scope
   --> core/synapsed-net/src/transport/quic.rs:202:37
    |
202 |                 config_with_session.enable_0rtt();
    |                                     ^^^^^^^^^^^ method not found in `ClientConfig`

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/quic.rs:291:54
    |
291 |         match Pin::new(&mut self.recv).poll_read(cx, &mut quinn_buf) {
    |                                        ---------     ^^^^^^^^^^^^^^ expected `&mut ReadBuf<'_>`, found `&mut Vec<u8>`
    |                                        |
    |                                        arguments to this method are incorrect
    |
    = note: expected mutable reference `&mut ReadBuf<'_>`
               found mutable reference `&mut Vec<u8>`
note: method defined here
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.0/src/io/async_read.rs:54:8
    |
54  |     fn poll_read(
    |        ^^^^^^^^^

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/quic.rs:292:28
    |
291 |         match Pin::new(&mut self.recv).poll_read(cx, &mut quinn_buf) {
    |               ------------------------------------------------------ this expression has type `Poll<std::result::Result<(), std::io::Error>>`
292 |             Poll::Ready(Ok(Some(n))) => {
    |                            ^^^^^^^ expected `()`, found `Option<_>`
    |
    = note: expected unit type `()`
                    found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/quic.rs:296:28
    |
291 |         match Pin::new(&mut self.recv).poll_read(cx, &mut quinn_buf) {
    |               ------------------------------------------------------ this expression has type `Poll<std::result::Result<(), std::io::Error>>`
...
296 |             Poll::Ready(Ok(None)) => Poll::Ready(Err(std::io::Error::new(
    |                            ^^^^ expected `()`, found `Option<_>`
    |
    = note: expected unit type `()`
                    found enum `std::option::Option<_>`

error[E0599]: no method named `poll_finish` found for struct `Pin<&mut SendStream>` in the current scope
   --> core/synapsed-net/src/transport/quic.rs:337:40
    |
337 |         match Pin::new(&mut self.send).poll_finish(cx) {
    |                                        ^^^^^^^^^^^
    |
help: there is a method `finish` with a similar name, but with different arguments
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quinn-0.11.8/src/send_stream.rs:140:5
    |
140 |     pub fn finish(&mut self) -> Result<(), ClosedStream> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/quic.rs:454:16
    |
454 |         if let Ok(certs) = rustls_native_certs::load_native_certs() {
    |                ^^^^^^^^^   ---------------------------------------- this expression has type `CertificateResult`
    |                |
    |                expected `CertificateResult`, found `Result<_, _>`
    |
    = note: expected struct `CertificateResult`
                 found enum `std::result::Result<_, _>`

error[E0599]: no method named `try_clone` found for struct `tokio::net::TcpStream` in the current scope
    --> core/synapsed-net/src/transport/tcp.rs:63:31
     |
63   |             conns.push(stream.try_clone().map_err(|e| NetworkError::Transport(TransportError::Tcp(e.to_string())))?);
     |                               ^^^^^^^^^
     |
help: there is a method `try_io` with a similar name, but with different arguments
    --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.0/src/net/tcp/stream.rs:1020:5
     |
1020 | /     pub fn try_io<R>(
1021 | |         &self,
1022 | |         interest: Interest,
1023 | |         f: impl FnOnce() -> io::Result<R>,
1024 | |     ) -> io::Result<R> {
     | |______________________^

error[E0599]: no method named `try_clone` found for struct `tokio::net::TcpListener` in the current scope
   --> core/synapsed-net/src/transport/tcp.rs:171:39
    |
171 |         let listener_clone = listener.try_clone().expect("Failed to clone listener");
    |                                       ^^^^^^^^^ method not found in `TcpListener`

error[E0277]: the trait bound `(): IntoHeaderName` is not satisfied
    --> core/synapsed-net/src/transport/websocket.rs:102:17
     |
101  |               request.headers_mut().insert(
     |                                     ------ required by a bound introduced by this call
102  | /                 key.parse().map_err(|e: tokio_tungstenite::tungstenite::http::header::InvalidHeaderName| 
103  | |                     NetworkError::Transport(TransportError::WebSocket(e.to_string())))?,
     | |_______________________________________________________________________________________^ the trait `IntoHeaderName` is not implemented for `()`
     |
     = help: the following other types implement trait `IntoHeaderName`:
               &'a HeaderName
               &'static str
               HeaderName
note: required by a bound in `HeaderMap::<T>::insert`
    --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/header/map.rs:1230:12
     |
1228 |     pub fn insert<K>(&mut self, key: K, val: T) -> Option<T>
     |            ------ required by a bound in this associated function
1229 |     where
1230 |         K: IntoHeaderName,
     |            ^^^^^^^^^^^^^^ required by this bound in `HeaderMap::<T>::insert`

error[E0277]: the trait bound `(): FromStr` is not satisfied
    --> core/synapsed-net/src/transport/websocket.rs:102:21
     |
102  |                 key.parse().map_err(|e: tokio_tungstenite::tungstenite::http::header::InvalidHeaderName| 
     |                     ^^^^^ the trait `FromStr` is not implemented for `()`
     |
     = help: the following other types implement trait `FromStr`:
               Authority
               Braced
               ByteString
               CString
               HeaderName
               HeaderValue
               Hyphenated
               ObjectIdentifier
             and 112 others
note: required by a bound in `core::str::<impl str>::parse`
    --> /usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:2601:21
     |
2601 |     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     |                     ^^^^^^^ required by this bound in `core::str::<impl str>::parse`

error[E0599]: no method named `poll_ready` found for struct `Pin<Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:380:40
    |
380 |                     match Pin::new(ws).poll_ready(cx) {
    |                                        ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:380:27
    |
380 |                     match Pin::new(ws).poll_ready(cx) {
    |                           ^^^^^^^^^^^^
help: there is a method `poll_ready_unpin` with a similar name
    |
380 |                     match Pin::new(ws).poll_ready_unpin(cx) {
    |                                                  ++++++

error[E0599]: no method named `start_send` found for struct `Pin<Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:382:48
    |
382 | ...                   match Pin::new(ws).start_send(message) {
    |                                          ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:382:35
    |
382 | ...                   match Pin::new(ws).start_send(message) {
    |                             ^^^^^^^^^^^^
help: there is a method `start_send_unpin` with a similar name
    |
382 |                             match Pin::new(ws).start_send_unpin(message) {
    |                                                          ++++++

error[E0599]: no method named `poll_ready` found for struct `Pin<Pin<&mut WebSocketStream<tokio::net::TcpStream>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:415:40
    |
415 |                     match Pin::new(ws).poll_ready(cx) {
    |                                        ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:415:27
    |
415 |                     match Pin::new(ws).poll_ready(cx) {
    |                           ^^^^^^^^^^^^
help: there is a method `poll_ready_unpin` with a similar name
    |
415 |                     match Pin::new(ws).poll_ready_unpin(cx) {
    |                                                  ++++++

error[E0599]: no method named `start_send` found for struct `Pin<Pin<&mut WebSocketStream<tokio::net::TcpStream>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:417:48
    |
417 | ...                   match Pin::new(ws).start_send(message) {
    |                                          ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:417:35
    |
417 | ...                   match Pin::new(ws).start_send(message) {
    |                             ^^^^^^^^^^^^
help: there is a method `start_send_unpin` with a similar name
    |
417 |                             match Pin::new(ws).start_send_unpin(message) {
    |                                                          ++++++

error[E0599]: no method named `poll_ready` found for struct `Pin<Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:452:40
    |
452 |                     match Pin::new(ws).poll_ready(cx) {
    |                                        ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:452:27
    |
452 |                     match Pin::new(ws).poll_ready(cx) {
    |                           ^^^^^^^^^^^^
help: there is a method `poll_ready_unpin` with a similar name
    |
452 |                     match Pin::new(ws).poll_ready_unpin(cx) {
    |                                                  ++++++

error[E0599]: no method named `start_send` found for struct `Pin<Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:454:58
    |
454 | ...                   if let Err(e) = Pin::new(ws).start_send(message) {
    |                                                    ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:454:45
    |
454 | ...                   if let Err(e) = Pin::new(ws).start_send(message) {
    |                                       ^^^^^^^^^^^^
help: there is a method `start_send_unpin` with a similar name
    |
454 |                             if let Err(e) = Pin::new(ws).start_send_unpin(message) {
    |                                                                    ++++++

error[E0599]: no method named `poll_flush` found for struct `Pin<Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:476:36
    |
476 |                 match Pin::new(ws).poll_flush(cx) {
    |                                    ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:103:5
    |
103 |     fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:103:5
    |
103 |     fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:476:23
    |
476 |                 match Pin::new(ws).poll_flush(cx) {
    |                       ^^^^^^^^^^^^
help: there is a method `flush` with a similar name, but with different arguments
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/sink/mod.rs:207:5
    |
207 | /     fn flush(&mut self) -> Flush<'_, Self, Item>
208 | |     where
209 | |         Self: Unpin,
    | |____________________^

error[E0599]: no method named `poll_ready` found for struct `Pin<Pin<&mut WebSocketStream<tokio::net::TcpStream>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:491:40
    |
491 |                     match Pin::new(ws).poll_ready(cx) {
    |                                        ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:68:5
    |
68  |     fn poll_ready(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:491:27
    |
491 |                     match Pin::new(ws).poll_ready(cx) {
    |                           ^^^^^^^^^^^^
help: there is a method `poll_ready_unpin` with a similar name
    |
491 |                     match Pin::new(ws).poll_ready_unpin(cx) {
    |                                                  ++++++

error[E0599]: no method named `start_send` found for struct `Pin<Pin<&mut WebSocketStream<tokio::net::TcpStream>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:493:58
    |
493 | ...                   if let Err(e) = Pin::new(ws).start_send(message) {
    |                                                    ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:89:5
    |
89  |     fn start_send(self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:493:45
    |
493 | ...                   if let Err(e) = Pin::new(ws).start_send(message) {
    |                                       ^^^^^^^^^^^^
help: there is a method `start_send_unpin` with a similar name
    |
493 |                             if let Err(e) = Pin::new(ws).start_send_unpin(message) {
    |                                                                    ++++++

error[E0599]: no method named `poll_flush` found for struct `Pin<Pin<&mut WebSocketStream<tokio::net::TcpStream>>>` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:515:36
    |
515 |                 match Pin::new(ws).poll_flush(cx) {
    |                                    ^^^^^^^^^^
    |
note: method is available for `Pin<&mut Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:103:5
    |
103 |     fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method is available for `Pin<&Pin<&mut WebSocketStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:103:5
    |
103 |     fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider pinning the expression with `std::pin::pin!()` and assigning that to a new binding
   --> core/synapsed-net/src/transport/websocket.rs:515:23
    |
515 |                 match Pin::new(ws).poll_flush(cx) {
    |                       ^^^^^^^^^^^^
help: there is a method `flush` with a similar name, but with different arguments
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/sink/mod.rs:207:5
    |
207 | /     fn flush(&mut self) -> Flush<'_, Self, Item>
208 | |     where
209 | |         Self: Unpin,
    | |____________________^

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/websocket.rs:529:13
    |
528 |         match self.project() {
    |               -------------- this expression has type `WebSocketStreamWrapperProj<'_>`
529 |             WebSocketStreamWrapper::Tls { ws, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `WebSocketStreamWrapperProj<'_>`, found `WebSocketStreamWrapper`

error[E0308]: mismatched types
   --> core/synapsed-net/src/transport/websocket.rs:539:13
    |
528 |         match self.project() {
    |               -------------- this expression has type `WebSocketStreamWrapperProj<'_>`
...
539 |             WebSocketStreamWrapper::Plain { ws, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `WebSocketStreamWrapperProj<'_>`, found `WebSocketStreamWrapper`

error[E0277]: the trait bound `WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>: Deref` is not satisfied
    --> core/synapsed-net/src/transport/websocket.rs:530:32
     |
530  |                 match Pin::new(ws).poll_close(cx) {
     |                       -------- ^^ the trait `Deref` is not implemented for `WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>`
     |                       |
     |                       required by a bound introduced by this call
     |
note: required by a bound in `Pin::<Ptr>::new`
    --> /usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/pin.rs:1165:11
     |
1165 | impl<Ptr: Deref<Target: Unpin>> Pin<Ptr> {
     |           ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Pin::<Ptr>::new`
...
1187 |     pub const fn new(pointer: Ptr) -> Pin<Ptr> {
     |                  --- required by a bound in this associated function
help: consider borrowing here
     |
530  |                 match Pin::new(&ws).poll_close(cx) {
     |                                +
530  |                 match Pin::new(&mut ws).poll_close(cx) {
     |                                ++++

error[E0599]: no method named `poll_close` found for struct `Pin` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:530:36
    |
530 |                 match Pin::new(ws).poll_close(cx) {
    |                                    ^^^^^^^^^^ method not found in `Pin<WebSocketStream<MaybeTlsStream<TcpStream>>>`
    |
note: method is available for `Pin<&mut WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:116:5
    |
116 |     fn poll_close(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `WebSocketStream<tokio::net::TcpStream>: Deref` is not satisfied
    --> core/synapsed-net/src/transport/websocket.rs:540:32
     |
540  |                 match Pin::new(ws).poll_close(cx) {
     |                       -------- ^^ the trait `Deref` is not implemented for `WebSocketStream<tokio::net::TcpStream>`
     |                       |
     |                       required by a bound introduced by this call
     |
note: required by a bound in `Pin::<Ptr>::new`
    --> /usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/pin.rs:1165:11
     |
1165 | impl<Ptr: Deref<Target: Unpin>> Pin<Ptr> {
     |           ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Pin::<Ptr>::new`
...
1187 |     pub const fn new(pointer: Ptr) -> Pin<Ptr> {
     |                  --- required by a bound in this associated function
help: consider borrowing here
     |
540  |                 match Pin::new(&ws).poll_close(cx) {
     |                                +
540  |                 match Pin::new(&mut ws).poll_close(cx) {
     |                                ++++

error[E0599]: no method named `poll_close` found for struct `Pin` in the current scope
   --> core/synapsed-net/src/transport/websocket.rs:540:36
    |
540 |                 match Pin::new(ws).poll_close(cx) {
    |                                    ^^^^^^^^^^ method not found in `Pin<WebSocketStream<TcpStream>>`
    |
note: method is available for `Pin<&mut WebSocketStream<tokio::net::TcpStream>>`
   --> /usr/local/cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs:116:5
    |
116 |     fn poll_close(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Zeroize`
  --> core/synapsed-net/src/crypto/enhanced_security.rs:21:15
   |
21 | use zeroize::{Zeroize, ZeroizeOnDrop};
   |               ^^^^^^^

warning: unused import: `KeyInit`
  --> core/synapsed-net/src/security.rs:12:26
   |
12 | use aes_gcm::{Aes256Gcm, KeyInit as AesKeyInit};
   |                          ^^^^^^^

warning: unused import: `StreamExt`
 --> core/synapsed-net/src/transport/websocket.rs:8:35
  |
8 | use futures_util::{Sink, SinkExt, StreamExt, stream::Stream as FuturesStream, ready};
  |                                   ^^^^^^^^^

warning: unused import: `SinkExt`
 --> core/synapsed-net/src/transport/websocket.rs:8:26
  |
8 | use futures_util::{Sink, SinkExt, StreamExt, stream::Stream as FuturesStream, ready};
  |                          ^^^^^^^

error[E0597]: `okm` does not live long enough
   --> core/synapsed-net/src/crypto/session.rs:312:13
    |
306 |             let mut okm = [0u8; 32];
    |                 ------- binding `okm` declared here
...
312 |             &okm
    |             ^^^^ borrowed value does not live long enough
313 |         };
    |         - `okm` dropped here while still borrowed

error[E0597]: `okm` does not live long enough
   --> core/synapsed-net/src/crypto/session.rs:361:13
    |
355 |             let mut okm = [0u8; 32];
    |                 ------- binding `okm` declared here
...
361 |             &okm
    |             ^^^^ borrowed value does not live long enough
362 |         };
    |         - `okm` dropped here while still borrowed

warning: variable does not need to be mutable
   --> core/synapsed-net/src/transport/libp2p_simple.rs:113:9
    |
113 |         mut self: Pin<&mut Self>,
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> core/synapsed-net/src/transport/libp2p_simple.rs:129:9
    |
129 |         mut self: Pin<&mut Self>,
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `addr`
   --> core/synapsed-net/src/transport/quic.rs:243:28
    |
243 |     async fn listen(&self, addr: SocketAddr) -> Result<Box<dyn Listener>> {
    |                            ^^^^ help: if this is intentional, prefix it with an underscore: `_addr`

warning: unused variable: `tls_config`
  --> core/synapsed-net/src/transport/websocket.rs:74:46
   |
74 |     pub fn with_tls(config: WebSocketConfig, tls_config: rustls::ClientConfig) -> Self {
   |                                              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tls_config`

error[E0596]: cannot borrow `ws` as mutable, as it is not declared as mutable
   --> core/synapsed-net/src/transport/websocket.rs:250:23
    |
250 |                 match ws.as_mut().poll_next(cx) {
    |                       ^^ cannot borrow as mutable
    |
help: consider changing this to be mutable
    |
240 |             WebSocketStreamWrapperProj::Tls { mut ws, read_buffer, .. } => {
    |                                               +++

error[E0596]: cannot borrow `ws` as mutable, as it is not declared as mutable
   --> core/synapsed-net/src/transport/websocket.rs:310:23
    |
310 |                 match ws.as_mut().poll_next(cx) {
    |                       ^^ cannot borrow as mutable
    |
help: consider changing this to be mutable
    |
300 |             WebSocketStreamWrapperProj::Plain { mut ws, read_buffer, .. } => {
    |                                                 +++

warning: unused variable: `config`
   --> core/synapsed-net/src/transport/websocket.rs:627:29
    |
627 |                         let config = config_clone.clone();
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `connections`
  --> core/synapsed-net/src/transport/webrtc.rs:89:13
   |
89 |         let connections = self.connections.clone();
   |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connections`

Some errors have detailed explanations: E0277, E0308, E0369, E0560, E0596, E0597, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `synapsed-net` (lib) generated 31 warnings
error: could not compile `synapsed-net` (lib) due to 48 previous errors; 31 warnings emitted
